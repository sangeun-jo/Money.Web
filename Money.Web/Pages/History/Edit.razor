@page "/history/edit/{id:long}"

@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Money.Shared.DTOs.History
@using Money.Shared.DTOs.Category
@using Money.Shared.Enums
@using Money.Shared.Extenstions
@using Money.Shared.Mappers

@inject NavigationManager NavigationManager
@inject IHistoryService HistoryService
@inject ICategoryService CategoryService


<MudAppBar ToolBarClass="h-auto ma-0 pa-0" Style="background-color: white; box-shadow: none; ">
    <MudStack Class="w-100 border-bottom"  Spacing="0">
        <MudToolBar Class="px-0" Dense="true" Style="background-color: white; box-shadow: none;">
            <MudIconButton  Icon="@Icons.Material.Outlined.ArrowBack"Href=@($"/history/{_request.CreatedDate?.ToString("yyyy-MM")}")/>
            <MudText Typo="Typo.subtitle1" Color="Color.Dark">내역 수정</MudText>
        </MudToolBar>
    </MudStack>
</MudAppBar>

<MudPaper Style="padding-top:64px;background-color: white; padding-bottom: 20px; box-shadow:none;" Square="true">
    <EditForm Context="context" Model="@_request">
        <DataAnnotationsValidator/>
        
        <MudStack Class="px-4" Spacing="2">
            <MudStack Row="true">
                <MudButton FullWidth="true"
                           Variant="Variant.Outlined"
                           Color="@(_request.MoneyType == MoneyType.Expense ? Color.Error : Color.Default)"
                           OnClick="() => { _request.MoneyType = MoneyType.Expense; }"
                           DropShadow="false">
                    @MoneyType.Expense.GetDisplayName()
                </MudButton>
                <MudButton FullWidth="true"
                           Variant="Variant.Outlined"
                           Color="@(_request.MoneyType == MoneyType.Income ? Color.Error : Color.Default)"
                           OnClick="() => { _request.MoneyType = MoneyType.Income; }"
                           DropShadow="false">
                    @MoneyType.Income.GetDisplayName()
                </MudButton>
                <MudButton FullWidth="true"
                           Variant="Variant.Outlined"
                           Color="Color.Default"
                           DropShadow="false">이체
                </MudButton>
            </MudStack>

            <MudStack Row="true">
                <MudDatePicker @bind-Date="_request.CreatedDate" Margin="Margin.Normal" Label="날짜"/>
                <MudTimePicker
                    @bind-Time="_time"
                    AmPm="true"
                    Margin="Margin.Normal"
                    Label="시간">
                </MudTimePicker>
            </MudStack>

            <MudSelect Typo="Typo.body2" @bind-Value="_request.CategoryId" Margin="Margin.Dense" ShrinkLabel Label="카테고리">
                @foreach (var category in _categories.Where(x => x.MoneyType == _request.MoneyType))
                {
                    <MudSelectItem Value="@((int?)category.Id)">@category.Name</MudSelectItem>
                }
            </MudSelect>
            <MudTextField Typo="Typo.body2" @bind-Value="_request.Place" ShrinkLabel Margin="Margin.Normal" T="string" Label="거래처"/>
            <MudNumericField Typo="Typo.body2" @bind-Value="_request.Amount" Margin="Margin.Normal" T="int?" Label="금액" For="@(() => _request.Amount)"/>

            <MudTextField AutoGrow Typo="Typo.body2" @bind-Value="_request.Note" ShrinkLabel Margin="Margin.Normal" T="string" Label="내용"/>

            <MudStack Row="true">
                <MudButton ButtonType="ButtonType.Button" Variant="Variant.Outlined" Color="Color.Default" Class="ml-auto w-25" OnClick="DeleteAsync">삭제</MudButton>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Error" Class="ml-auto w-75" OnClick="@(() => EditAsync(context))">저장</MudButton>
            </MudStack>
        </MudStack>
    </EditForm>
</MudPaper>

@code {
    private HistoryUpdateDto _request = new HistoryUpdateDto
    {
        CreatedDate = DateTime.Today.Date // 시간 제외 날짜만
    };
    
    private TimeSpan? _time;
    
    [Parameter]
    public long Id { get; set; }
    
    private IEnumerable<CategoryDisplayDto>? _categories = new List<CategoryDisplayDto>();
    
    protected override async Task OnInitializedAsync()
    {
        var history = await HistoryService.GetHistoryByIdAsync(Id);
        _request = history.ToHistoryUpdateDto();
        _time = history.CreatedDate?.TimeOfDay;
        _categories = await CategoryService.GetAllCategoryAsync(null);
    }
    
    private async Task EditAsync(EditContext context)
    {
        _request.CreatedDate =  _request.CreatedDate?.Date + _time;

        var isValid = context.Validate();
        if(!isValid) return;
        
        await HistoryService.UpdateHistoryAsync(_request);
        
        NavigationManager.NavigateTo($"/history/{_request.CreatedDate?.ToString("yyyy-MM")}");
    }

    private async Task DeleteAsync()
    {
        await HistoryService.DeleteHistoryAsync(Id);
        NavigationManager.NavigateTo($"/history/{_request.CreatedDate?.ToString("yyyy-MM")}"); 
    }
}