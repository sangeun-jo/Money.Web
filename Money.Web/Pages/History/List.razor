@page "/history"
@page "/history/{date}"

@attribute [Authorize]

<PageTitle>내역</PageTitle>

@using Microsoft.AspNetCore.Authorization
@using Money.Shared.DTOs.History
@using Money.Shared.DTOs.Category
@using Money.Shared.Enums

@using Money.Web.Components
@using System.Globalization

@inject IHistoryService HistoryService
@inject ICategoryService CategoryService

@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager

<MudAppBar ToolBarClass="h-auto ma-0 pa-0" Style="background-color: white; box-shadow: none; ">
    <MudStack Class="w-100" Spacing="0">
        <MudToolBar Dense="true" Class="pa-0" Style="background-color: white; box-shadow: none;" >
            <MudIconButton Icon="@Icons.Material.Outlined.NavigateBefore" OnClick="@GoToBefore"/>
            <MudText Typo="Typo.subtitle1" Color="Color.Dark">@($"{_curDate.Year}년 {_curDate.Month}월")</MudText>
            <MudIconButton Icon="@Icons.Material.Outlined.NavigateNext" OnClick="@GoToNext"/>
        </MudToolBar>
        <AppBarTrio Income=_incomeSum Expense=_expenseSum />
    </MudStack>
</MudAppBar>

@if (_histories?.Count() > 0)
{
    <MudTable Dense="true"
              Items="_histories"
              GroupBy="@_groupDefinition"
              Breakpoint="Breakpoint.None"
              T="HistoryDisplayDto"
              OnRowClick="@Edit"
              Square="true"
              Hover="true"
              Class="shadow-none"
              Style="padding-top: 108px;">

        <GroupHeaderTemplate >
            <MudTh colspan="3">
                <MudStack Row="true">
                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                        <MudText Typo="Typo.h6">@($"{Convert.ToDateTime(context.Key).Day:0#}")</MudText>
                        <MudChip T="string" Label="true" Size="Size.Small" Color="@(GetDayOfWeekColor(context.Key as string))">
                            @($"{Convert.ToDateTime(context.Key, _culture).ToString("ddd")}요일")
                        </MudChip>
                    </MudStack>

                    <MudSpacer/>

                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1" Style="width: 50%;">
                        <MudText Typo="Typo.body2" Color="Color.Info" Style="text-align: end; width: 50%;">
                            @($"{context.Items.Where(e => e.CreatedDate?.ToString("yyyy/MM/dd") == (string?)context.Key).Where(e => e.MoneyType == MoneyType.Income).Sum((e) => e.Amount):##,##0}원")
                        </MudText>
                        <MudText Typo="Typo.body2" Color="Color.Error" Style="text-align: end; width: 50%;">
                            @($"-{context.Items.Where(e => e.CreatedDate?.ToString("yyyy/MM/dd") == (string?)context.Key).Where(e => e.MoneyType == MoneyType.Expense).Sum((e) => e.Amount):##,###0}원")
                        </MudText>
                    </MudStack>

                </MudStack>
            </MudTh>
        </GroupHeaderTemplate>

        <RowTemplate >
            <MudTd DataLabel="분류" Style="width: 30%;" Class="@context.Id.ToString()">
                <MudText Typo="Typo.caption">@(_categories?.Where(x => x.Id == context.CategoryId)?.FirstOrDefault()?.Name) </MudText>
            </MudTd>
            <MudTd DataLabel="거래처" Style="width: 40%;">
                <MudStack Row="false" Spacing="0" Class="px-0">
                    <MudText Style="font-size: 10pt;" Color="Color.Dark">@context.Place?.Trim()</MudText>
                    <MudText Typo="Typo.caption" Style="color: grey;">
                        @($"{context.CreatedDate?.ToString("tt h:mm")}")
                    </MudText>
                </MudStack>
            </MudTd>
            <MudTd DataLabel="금액" Style="text-align: right;width: 30%;">
                <MudText Typo=Typo.body2>
                    @($"{(context.MoneyType == MoneyType.Income ? context.Amount : -1 * context.Amount) :##,###}원")
                </MudText>
            </MudTd>
        </RowTemplate>

        <GroupFooterTemplate>
            <MudTh Style=@("background-color:var(--mud-palette-background-gray)") colspan="3"></MudTh>
        </GroupFooterTemplate>
    </MudTable>

    <br/><br/><br/>
    <br/><br/><br/>

}
else
{
    <MudStack Spacing="0" Style="margin-top: 208px;">
        <MudImage Style="opacity: 25%; max-width: 150px;" Src="/images/pig.png" Class="mx-auto w-25" />
        <MudText Style="color: darkgray" Align="Align.Center"  Typo="Typo.caption">내역이 없습니다</MudText>
    </MudStack>
}


<MudFab Color="Color.Error" StartIcon="@Icons.Material.Filled.Add" Style="position:fixed; bottom:64px;right:0;margin: 15px;" OnClick="@(() => NavigationManager.NavigateTo("/history/add"))"/>



@code {


    [Parameter]
    public string Date { get; set; }
    
    private readonly CultureInfo? _culture = CultureInfo.CreateSpecificCulture("ko-KR");
    private DateTime _curDate = DateTime.Today; 
    
    
    private IEnumerable<CategoryDisplayDto>? _categories = new List<CategoryDisplayDto>();
    protected override async Task OnInitializedAsync()
    {
        _categories = await CategoryService.GetAllCategoryAsync(null);
    }
    
    protected override async Task OnParametersSetAsync()
    {
        _curDate = string.IsNullOrEmpty(Date) 
            ? DateTime.Today 
            : DateTime.ParseExact(Date, "yyyy-MM", null);
        _histories = await HistoryService.GetAllHistoryAsync(_curDate.ToString("yyyy-MM"));
        _incomeSum = _histories?.Where(x => x.MoneyType == MoneyType.Income)?.Sum(x => x.Amount) ?? 0;
        _expenseSum = _histories?.Where(x => x.MoneyType == MoneyType.Expense)?.Sum(x => x.Amount) ?? 0;

        
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsync("restoreScrollPosition");
        }
    }

    private IEnumerable<HistoryDisplayDto>? _histories = new List<HistoryDisplayDto>();
    private int _expenseSum = 0;
    private int _incomeSum = 0;
    
    
    private TableGroupDefinition<HistoryDisplayDto> _groupDefinition = new()
    {
        Indentation = false,
        Expandable = false,
        IsInitiallyExpanded = true,
        Selector = (e) => e.CreatedDate?.ToString("yyyy/MM/dd")!
    };
    
    private void GoToBefore()
    {
        NavigationManager.NavigateTo($"/history/{_curDate.AddMonths(-1):yyyy-MM}");
    }

    private void GoToNext()
    {
        NavigationManager.NavigateTo($"/history/{_curDate.AddMonths(1):yyyy-MM}");
    }
    
    public async Task Edit(TableRowClickEventArgs<HistoryDisplayDto> h)
    {
        await JsRuntime.InvokeVoidAsync("saveScrollPosition");
        NavigationManager.NavigateTo($"/history/edit/{h.Item?.Id}");
    }

    // NOTE: 자바스크립트로 해도 될 듯
    Color GetDayOfWeekColor(string? date)
    {
        var dayOfWeek = Convert.ToDateTime(date, _culture).DayOfWeek;
        
        switch (dayOfWeek) 
        {
            case DayOfWeek.Sunday:
                return Color.Error;
            case DayOfWeek.Saturday:
                return Color.Info;
            default:
                return Color.Default;
        };
    }
    
    
}